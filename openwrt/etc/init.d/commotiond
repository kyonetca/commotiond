#!/bin/sh /etc/rc.common

. /lib/functions/commotion.sh
. /lib/functions/network.sh
. /lib/config/uci.sh

#DEBUG=echo
START=19
STOP=91
EXTRA_COMMANDS="cron"
EXTRA_HELP="	cron	Watchdog function meant to be called from cron"
CRON_SERVICES="commotiond olsrd commotion-service-manager dnsmasq"
CRON_THRESHOLD="180"

boot() {
  logger -t commotion.init "Called: boot"
  case "$(uci_get wireless @wifi-device[0] disabled 1)" in
    1)
      case "$(uci_get wireless @wifi-iface[0] ssid "OpenWrt")" in
        "OpenWrt")
          rm -f /etc/config/wireless
          $DEBUG /sbin/wifi detect > /etc/config/wireless
          # Clear out any existing wireless interfaces
          $DEBUG uci_load wireless
          while [ "$?" != '1' ]; do
            logger -t commotion.init "Removing interfaces."
            $DEBUG uci_remove wireless @wifi-iface[]
          done
          $DEBUG uci_commit wireless
          logger -t commotion.init "Applied wireless defaults."
        ;;
      esac
    ;;
  esac
  mkdir -m 0755 -p /var/run/commotion
  rm -rf /var/serval-node
  ln -s /etc/serval/ /var/serval-node
  start
}

start() {
  logger -t commotion.init "Called: start"
  local args bind profiles pid statedir id

  config_cb() {  
    local type="$1"
    local name="$2"
    
    case "$type" in
      "daemon")
      	option_cb() {
      	  local name="$1"
      	  local value="$2"
        
          case "$name" in
            "config")
	      append args "-b $value"
	      ;;
	      "bind")
              append args "-b $value"
              ;;
            "plugins")
	      append args "-d $value"
	      ;;    
            "profiles")
              append args "-f $value"
              ;;
            "id")
	      append args "-i $value"
	      ;;
	    "nodaemonize")
	      append args "-n $value"
	      ;;
            "pid")
              append args "-p $value"
              ;;
            "statedir")
              append args "-s $value"
              ;;
            "help")
	      append args "-h"
	      ;;
          esac
        }
        ;;
      "node")
      	option_cb() {
      	  local name="$1"
      	  local value="$2"
        
          case "$name" in
            "id")
              append args "-i $value"
              ;;
          esac
        }
        ;;
    esac
  }
  config_load commotiond

  $DEBUG service_start /usr/sbin/commotiond $args
  
  sleep 1 #allow commotiond to settle
  
  [ -z "$(uci_get commotiond @node[0] id)" ] && {
    echo "Nodeid generation!"
    commotion_set_nodeid_from_mac "$(cat /sys/class/ieee80211/phy0/macaddress)"
    uci_set commotiond @node[0] id "$(commotion_get_nodeid)"
    uci_commit commotiond
  }
  
  reset_cb
  config_cb() {  
    local type="$1"
    local name="$2"
    
    [ "$type" == "interface" ] && {
      local proto="$(uci_get network "$name" proto)"
      local class="$(uci_get network "$name" class)"
      [ "$proto" == "commotion" -a "$class" == "mesh" ] && { 
        local profile="$(uci_get network "$name" profile)"
        network_get_physdev physdev "$name"
        [ ! -z "$physdev" ] && [ ! -z "$profile" ] && {
          logger -t commotion.init "commotion_up "$physdev" "$profile""
          commotion_up "$physdev" "$profile"
        }
      }
    }
  }
  config_load network

}

stop() {
  logger -t commotion.init "Called: stop"
  $DEBUG service_stop /usr/sbin/commotiond 
}

cron() {
  logger -t commotion.init "Called: cron"

  enabled && {
    local uptime=$(awk -F . '{print $1}' /proc/uptime) 
    [ $uptime -ge $CRON_THRESHOLD ] && [ "$(uci_get setup_wizard settings enabled 1)" == 0 ] && {
      [ "$(uci_get_state commotiond @node[0] restarted 0)" == 0 ] && {
        logger -t commotion.init "Restarting commotiond $CRON_THRESHOLD seconds after boot."
        uci_set_state commotiond @node[0] restarted 1
        restart
        return 0
      }

      for s in $CRON_SERVICES
      do
        /etc/init.d/"$s" enabled && ! service_check "/usr/sbin/$s" && \
          ( logger -t commotion.init "Restarting $s"; /etc/init.d/"$s" restart )
      done
    }
  }
}

